@model PostsViewModel
@{
    ViewData["Title"] = "Manage Posts | MyBlog";
}

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: #f8fafc;
        color: #1f2937;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Roboto', sans-serif;
        color: #2d3748;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2.5rem;
    }

    .header h1 {
        font-size: 2.2rem;
        font-weight: 800;
        color: #7f143f;
    }

    .btn-primary {
        background-color: rgb(209, 153, 162);
        border-color: rgb(209, 153, 162);
        border-radius: 0.75rem;
        padding: 0.75rem 1.75rem;
        font-weight: 600;
        color: white;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 4px 10px rgba(127, 20, 63, 0.2);
    }

    .btn-primary:hover {
        background-color: #a82453;
        border-color: #a82453;
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(127, 20, 63, 0.35);
    }

    .filter-bar {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 2.5rem;
        flex-wrap: wrap;
        align-items: center;
    }

    .filter-bar select {
        appearance: none;
        background-color: #ffffff;
        color: #1f2937;
        font-weight: 500;
        font-size: 1rem;
        border: 1px solid #d1d5db;
        border-radius: 0.75rem;
        padding: 0.75rem 2.5rem 0.75rem 1.2rem;
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

    .filter-bar select:focus {
        outline: none;
        border-color: #7f143f;
        box-shadow: 0 0 0 0.25rem rgba(127, 20, 63, 0.25);
    }

    .filter-bar select option {
        background-color: #ffffff;
        color: #1f2937;
        font-weight: 500;
        padding: 0.5rem;
    }

    .filter-bar input {
        padding: 0.75rem 1.2rem;
        border: 1px solid #d1d5db;
        border-radius: 0.75rem;
        font-size: 1rem;
        flex: 1;
        min-width: 200px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

    .filter-bar input:focus {
        outline: none;
        border-color: #7f143f;
        box-shadow: 0 0 0 0.25rem rgba(127, 20, 63, 0.25);
    }


    .blog-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
    }

    .blog-card {
        background: #ffffff;
        border-radius: 1rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid #e2e8f0;
    }

    .blog-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
    }

    .blog-card img {
        width: 100%;
        height: 180px;
        object-fit: cover;
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }

    .blog-card-content {
        padding: 1.8rem;
    }

    .blog-card-content h3 {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 0.6rem;
        color: #2d3748;
    }

    .status-badge {
        display: inline-block;
        padding: 0.4rem 0.8rem;
        border-radius: 0.5rem;
        font-size: 0.85rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .status-active {
        background-color: #dcfce7;
        color: #15803d;
    }

    .status-inactive {
        background-color: #fee2e2;
        color: #b91c1c;
    }

    .blog-card-actions {
        margin-top: 1.5rem;
        display: flex;
        gap: 0.8rem;
    }

    .btn-sm {
        padding: 0.6rem 1.2rem;
        font-size: 0.9rem;
        border-radius: 0.6rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

    .btn-warning {
        background-color: #fcd34d;
        border-color: #fcd34d;
        color: #78350f;
    }

    .btn-warning:hover {
        background-color: #fbbf24;
        border-color: #fbbf24;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(251, 191, 36, 0.3);
    }

    .btn-danger {
        background-color: #dc2626;
        border-color: #dc2626;
        border-radius: 0.6rem;
        color: white;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-danger:hover {
        background-color: #b91c1c;
        border-color: #b91c1c;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(220, 38, 38, 0.3);
    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
        margin-top: 3rem;
        margin-bottom: 2rem;
    }

    .pagination a {
        padding: 0.7rem 1.2rem;
        border: 1px solid #d1d5db;
        border-radius: 0.75rem;
        text-decoration: none;
        color: #1f2937;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }

    .pagination a:hover {
        background-color: #f1f5f9;
        border-color: #7f143f;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .pagination .active {
        background-color: #7f143f;
        color: white;
        border-color: #7f143f;
        box-shadow: 0 4px 10px rgba(127, 20, 63, 0.2);
    }

    .modal-content {
        border-radius: 1rem;
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        background-color: rgba(255, 72, 72, 0.833);
        color: white;
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
        padding: 1.2rem 1.5rem;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #fff !important;
    }

    .modal-body {
        padding: 1.5rem;
        font-size: 1.05rem;
        color: #374151;
    }

    .modal-footer {
        padding: 1.2rem 1.5rem;
    }

    .toast-container {
        position: fixed;
        bottom: 1.5rem;
        right: 1.5rem;
        z-index: 1050;
    }

    .toast {
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
</style>

<div class="container my-5">
    <div class="header">
        <h1>Manage Posts</h1>
        <a href="/post/create" class="btn btn-primary">Create New Post</a>
    </div>
    <div class="filter-bar">
        <input type="text" id="searchInput" placeholder="Search posts..." value="@(ViewBag.Search ?? "")" />
        <select id="statusFilter">
            <option value="" selected="@(string.IsNullOrEmpty(ViewBag.Status) ? "selected" : null)">All Statuses
            </option>
            <option value="active" selected="@(ViewBag.Status == "active" ? "selected" : null)">Active</option>
            <option value="inactive" selected="@(ViewBag.Status == "inactive" ? "selected" : null)">Inactive</option>
        </select>
    </div>
    @if (Model?.Posts?.Any() ?? false)
    {
        <div class="blog-grid" id="blogGrid">
            @foreach (var item in Model.Posts)
            {
                <div class="blog-card" data-post-id="@item.PostId" data-title="@(item.Title?.ToLower() ?? "")">
                    <img src="/img/@(item.Image ?? "https://placehold.co/800x450/e0e0e0/ffffff?text=No+Image")"
                        alt="@(item.Title ?? "Post Image")">
                    <div class="blog-card-content">
                        <h3>@(item.Title ?? "Untitled")</h3>
                        <span class="status-badge @(item.IsActive ? "status-active" : "status-inactive")">
                            @(item.IsActive ? "Active" : "Inactive")
                        </span>
                        <div class="blog-card-actions">
                            @if (User.IsInRole("Admin") && item.UserId !=
                                                User.FindFirstValue(System.Security.Claims.ClaimTypes.NameIdentifier))
                            {
                                <a href="/Admin/EditPostStatus/@item.Url" class="btn btn-sm btn-warning">Manage Status</a>
                            }
                            else
                            {
                                <a href="/post/edit/@item.Url" class="btn btn-sm btn-primary">Edit</a>
                            }
                            <button type="button" class="btn btn-sm btn-danger delete-btn" data-bs-toggle="modal"
                                data-bs-target="#deleteModal" data-post-id="@item.PostId"
                                data-post-title="@item.Title">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (Model.TotalPages > 1)
        {
            <div class="pagination">
                @if (Model.CurrentPage > 1)
                {
                    <a
                        href="/post/list?page=@(Model.CurrentPage - 1)@(string.IsNullOrEmpty(ViewBag.Search) ? "" : $"&search={ViewBag.Search}")@(string.IsNullOrEmpty(ViewBag.Status) ? "" : $"&status={ViewBag.Status}")">Â«</a>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a href="/post/list?page=@i@(string.IsNullOrEmpty(ViewBag.Search) ? "" : $"&search={ViewBag.Search}")@(string.IsNullOrEmpty(ViewBag.Status) ? "" : $"&status={ViewBag.Status}")"
                        class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <a
                        href="/post/list?page=@(Model.CurrentPage + 1)@(string.IsNullOrEmpty(ViewBag.Search) ? "" : $"&search={ViewBag.Search}")@(string.IsNullOrEmpty(ViewBag.Status) ? "" : $"&status={ViewBag.Status}")">Â»</a>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            No posts found.
        </div>
    }
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Delete Post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete "<span id="postTitle"></span>"? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
            </div>
        </div>
    </div>
</div>


<div class="toast-container">
    <div id="toast" class="toast" role="alert" aria-live="assertive" data-bs-autohide="true" data-bs-delay="5000">
        <div class="toast-header">
            <strong id="toastTitle" class="me-auto"></strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body"></div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const deleteModal = document.getElementById('deleteModal');
            const toastEl = document.getElementById('toast');
            const toast = new bootstrap.Toast(toastEl);
            const toastTitle = document.getElementById('toastTitle');
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');

            function applyFilters() {
                const search = searchInput.value;
                const status = statusFilter.value;
                window.location.href = `/post/list?search=${encodeURIComponent(search)}&status=${status}`;
            }

            searchInput.addEventListener('input', function () {
                if (this.value.length >= 1 || this.value.length === 0) {
                    clearTimeout(this.searchTimeout);
                    this.searchTimeout = setTimeout(applyFilters, 500);
                }
            });

            statusFilter.addEventListener('change', applyFilters);

            deleteModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;
                const postId = button.getAttribute('data-post-id');
                const postTitle = button.getAttribute('data-post-title') || 'Untitled';
                document.getElementById('postTitle').textContent = postTitle;
                document.getElementById('confirm-delete').setAttribute('data-post-id', postId);
            });

            document.getElementById('confirm-delete').addEventListener('click', function () {
                const postId = this.getAttribute('data-post-id');
                if (!postId || isNaN(parseInt(postId))) {
                    showToast('Error', 'Invalid post ID.', 'danger');
                    return;
                }

                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenInput) {
                    showToast('Error', 'CSRF token not found.', 'danger');
                    return;
                }
                const token = tokenInput.value;

                fetch('/post/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify({ id: parseInt(postId) })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const card = document.querySelector(`.blog-card[data-post-id="${postId}"]`);
                            if (card) card.remove();
                            bootstrap.Modal.getInstance(deleteModal).hide();
                            showToast('Success', data.message, 'success');
                        } else {
                            showToast('Error', data.message || 'Failed to delete post.', 'danger');
                        }
                    })
                    .catch(error => {
                        showToast('Error', `An error occurred: ${error.message}`, 'danger');
                    });
            });

            function showToast(title, message, type) {
                const toastBody = document.querySelector('.toast-body');
                toastTitle.textContent = title;
                toastBody.textContent = message;
                toastEl.classList.remove('text-bg-success', 'text-bg-danger', 'text-bg-warning', 'text-bg-info');
                if (type === 'success') toastEl.classList.add('text-bg-success');
                else if (type === 'danger') toastEl.classList.add('text-bg-danger');
                else if (type === 'warning') toastEl.classList.add('text-bg-warning');
                else toastEl.classList.add('text-bg-info');

                toast.show();
            }
        });
    </script>
}

@Html.AntiForgeryToken()
