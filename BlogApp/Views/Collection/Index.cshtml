@model BlogApp.Models.CollectionsViewModel

@{
    ViewData["Title"] = "Collections | MyBlog";
    ViewBag.MetaDescription = "Discover crowdsourced article collections at MyBlog.";
}

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Roboto', sans-serif;
        color: var(--text-color);
    }

    .header {
        margin-bottom: 3rem;
        margin-top: 40px;
    }

    a {
        text-decoration: none;
        color: var(--primary-color);
    }

    .header h1 {
        font-size: 3rem;
        font-weight: 900;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        animation: fadeInUp 0.8s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .filter-bar {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 2.5rem;
        flex-wrap: wrap;
        align-items: center;
    }

    .filter-bar select {
        appearance: none;
        background-color: var(--card-background);
        color: var(--text-color);
        font-weight: 500;
        font-size: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.75rem;
        padding: 0.75rem 2.5rem 0.75rem 1.2rem;
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1rem;
        box-shadow: var(--card-shadow);
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .filter-bar select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(var(--primary-color-rgb), 0.25);
        outline: none;
    }

    .collection-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
    }

    .collection-card {
        background: var(--card-background);
        border-radius: 1rem;
        box-shadow: var(--card-shadow);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid var(--border-color);
        animation: fadeInUp 0.6s ease-out backwards;
        animation-delay: calc(var(--order) * 0.1s);
    }

    .collection-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
    }

    .collection-card-content {
        padding: 1.8rem;
    }

    .collection-card-content h3 {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 0.6rem;
        color: var(--text-color);
    }

    .collection-card-content p {
        font-size: 0.95rem;
        color: var(--text-secondary-color);
        margin-bottom: 1rem;
    }

    .collection-meta {
        font-size: 0.85rem;
        color: var(--text-secondary-color);
        font-weight: 500;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 0.75rem;
        padding: 0.9rem 2rem;
        font-weight: 600;
        color: white;
        transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 2rem;
    }

    .pagination a {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        color: var(--text-color);
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

    .pagination a:hover {
        background-color: var(--primary-color);
        color: white;
    }

    .pagination .active {
        background-color: var(--primary-color);
        color: white;
    }

    .alert-info {
        background-color: var(--info-background);
        border: 1px solid var(--info-border);
        color: var(--info-color);
        padding: 1rem;
        border-radius: 0.75rem;
        text-align: center;
        margin-top: 2rem;
    }

    @@media (max-width: 768px) {
        .header h1 {
            font-size: 2.5rem;
        }

        .collection-card-content h3 {
            font-size: 1.2rem;
        }

        .collection-meta {
            font-size: 0.8rem;
        }
    }
</style>

<div class="container">
    <div class="header">
        <h1>Collections</h1>
        <a asp-action="Create" asp-controller="Collection" class="btn btn-primary">Create New Collection</a>
    </div>

    <div class="filter-bar">
        <select id="sortFilter" onchange="applySort()">
            @{
                var sortOptions = new[]
                {
                        new { Value = "newest", Text = "Newest" },
                        new { Value = "popular", Text = "Most Popular" },
                        new { Value = "updated", Text = "Recently Updated" }
                        };

                foreach (var option in sortOptions)
                {
                    if (Model.Sort == option.Value)
                    {
                        <option value="@option.Value" selected>@option.Text</option>
                    }
                    else
                    {
                        <option value="@option.Value">@option.Text</option>
                    }
                }
            }
        </select>
    </div>

    @if (Model.Collections.Any())
    {
        <div class="collection-grid">
            @foreach (var collection in Model.Collections.Select((c, index) => new { Collection = c, Index = index }))
            {
                <div class="collection-card" style="--order: @collection.Index">
                    <div class="collection-card-content">
                        <h3><a asp-action="Details" asp-controller="Collection"
                                asp-route-id="@collection.Collection.Id">@collection.Collection.Title</a></h3>
                        <p>@(string.IsNullOrEmpty(collection.Collection.Description) ? "No description available." :
                                                collection.Collection.Description)</p>
                        <div class="collection-meta">
                            <span>Created by @(collection.Collection.Creator?.Name ?? "Unknown")</span> |
                            <span>@collection.Collection.Posts.Count Posts</span> |
                            <span>Created on @collection.Collection.CreatedAt.ToString("MMMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (Model.TotalPages > 1)
        {
            <div class="pagination mt-4">
                @if (Model.CurrentPage > 1)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@(Model.CurrentPage - 1)">«</a>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@i"
                        class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@(Model.CurrentPage + 1)">»</a>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            No collections found.
        </div>
    }
</div>

@section Scripts {
    <script>
        function applySort() {
            const sort = document.getElementById('sortFilter').value;
            window.location.href = `/collections?sort=${sort}&page=1`;
        }
    </script>
}