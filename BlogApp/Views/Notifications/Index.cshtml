@model List<Notification>

<style>
    /* Notification Dropdown specific styles */
    .dropdown-menu {
        background-color: var(--card-background);
        border: 1px solid var(--border-color);
        box-shadow: var(--card-shadow);
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .dropdown-item {
        color: var(--text-secondary-color);
        transition: background-color 0.3s ease, color 0.3s ease;
    }
    .dropdown-item:hover {
        background-color: var(--hover-background) !important;
        color: var(--text-color) !important;
    }
    .dropdown-divider {
        border-top: 1px solid var(--border-color);
    }
    .dropdown-item h6 {
        color: var(--text-color);
    }
    .text-muted {
        color: var(--text-secondary-color) !important; /* Ensure muted text is themed */
    }
    .text-primary {
        color: var(--primary-color) !important; /* Ensure primary text is themed */
    }

    /* Unread notification background */
    .unread-notification-bg {
        background-color: var(--light-primary-background) !important;
    }

    /* Notification badge */
    #notification-badge {
        background-color: var(--error-color) !important; /* Use error color for badge for urgency */
        color: white !important;
    }
</style>

<li class="nav-item dropdown">
    <a class="nav-link position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="bi bi-bell-fill" style="color: var(--text-secondary-color);"></i>
        @{
            var unreadCount = Model.Count(n => !n.IsRead);
        }
        <span id="notification-badge"
              class="position-absolute top-0 start-100 translate-middle badge rounded-pill @(unreadCount == 0 ? "d-none" : "")"
              style="font-size: 0.6em; --bs-badge-padding-x: 0.5em; --bs-badge-padding-y: 0.5em;">
            @unreadCount
        </span>
    </a>
    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown" style="width: 350px; max-height: 400px; overflow-y: auto;">
        <li class="px-3 py-2">
            <h6 class="mb-0">Notifications</h6>
        </li>
        <li><hr class="dropdown-divider"></li>

        @if(Model.Any())
        {
            foreach(var notification in Model)
            {
                <li>
                    <a class="dropdown-item py-2 @(notification.IsRead ? "" : "unread-notification-bg")" href="@notification.LinkUrl" style="white-space: normal;">
                        <small>@notification.Message</small>
                        <small class="d-block text-muted mt-1">@notification.CreatedAt.ToString("MMM dd, HH:mm")</small>
                    </a>
                </li>
            }
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item text-center text-primary" href="/Notifications/Index">View All Notifications"</a></li>
        }
        else
        {
            <li><p class="dropdown-item text-center text-muted py-4">No new notifications.</p></li>
        }
    </ul>
</li>
