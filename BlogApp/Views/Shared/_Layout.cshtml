<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/site.css">

    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Roboto:wght@400;500;700;900&display=swap"
        rel="stylesheet">

    @await RenderSectionAsync("Head", required: false)

    <title>Mls Blog</title>
</head>
<style>
    :root {
        --primary-color: rgb(136, 0, 21);
        --secondary-color: rgb(136, 0, 21);
        --third-color: #5c0f2f;
        --text-color: #2d3748;
        --text-secondary-color: #4a5568;
        --background-color: #f8fafc;
        --card-background: #ffffff;
        --card-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        --navbar-background: #ffffff;
        --navbar-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --border-color: #e2e8f0;
        --succes-background: sucess;
    }

    .dark-theme {
        --primary-color: #f9bbcf;
        --secondary-color: rgb(136, 0, 21);
        --third-color: #d195a8;
        --text-color: rgb(200, 200, 200);
        --text-secondary-color: #e2e8f0;
        --background-color: rgb(29, 30, 32);
        --card-background: rgb(29, 30, 32);
        --card-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
        --navbar-background: rgb(29, 30, 32);
        --navbar-shadow: 0 4px 12px rgb(29, 30, 32);
        --border-color: #4a5568;
    }

    body {
        font-family: 'Inter', sans-serif;
        color: var(--text-color);
        line-height: 1.6;
        background-color: var(--background-color);
        padding-top: 80px;
        transition: background-color 0.3s ease;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Roboto', sans-serif;
        color: var(--text-color);
    }

    .ql-toolbar.ql-snow,
    .ql-container.ql-snow {
        border-color: var(--border-color);
        background-color: var(--card-background);
    }

    .ql-snow.ql-toolbar button,
    .ql-snow .ql-toolbar button {
        color: var(--text-color);
    }

    .ql-snow .ql-stroke {
        stroke: var(--text-color) !important;
    }

    .ql-snow .ql-fill {
        fill: var(--text-color) !important;
    }

    .ql-editor {
        color: var(--text-color);
        background-color: var(--card-background);
        border-radius: 0 0 0.75rem 0.75rem;
        padding: 1.2rem;
    }

    .navbar {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1030;
        box-shadow: var(--navbar-shadow);
        border-radius: 18px;
        border-bottom: 3px solid var(--secondary-color);
        padding: 1rem 0;
        backdrop-filter: blur(9px);
        -webkit-backdrop-filter: blur(10px);
        transition: background-color 0.3s ease, box-shadow 0.3s ease;
        color: var(--text-color);
        background-color: var(--navbar-background);
    }

    .navbar-scrolled {
        background-color: transparent;
        color: var(--text-color);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.25);
    }

    .navbar-brand img {
        height: 45px;
        transition: transform 0.3s ease;
    }

    .navbar-brand img:hover {
        transform: scale(1.05);
    }

    .navbar-nav {
        align-items: center;
    }

    .nav-link {
        font-weight: 500;
        color: var(--text-secondary-color);
        margin: 0 10px;
        position: relative;
        transition: color 0.3s ease, transform 0.2s ease;
    }

    .nav-link:hover {
        color: var(--primary-color);
        transform: translateY(-2px);
    }

    .nav-link::after {
        content: '';
        position: absolute;
        width: 0%;
        height: 2px;
        background-color: var(--primary-color);
        left: 0;
        bottom: -5px;
        transition: width 0.3s ease-in-out;
    }

    .nav-link:hover::after {
        width: 100%;
        color: var(--text-color);
    }

    .btn-auth {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 0.75rem;
        padding: 0.6rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        margin-left: 1rem;
        box-shadow: 0 4px 8px rgba(127, 20, 63, 0.2);
    }

    .btn-auth:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(127, 20, 63, 0.3);
        color: white;
    }

    .btn-auth-outline {
        background-color: transparent;
        color: var(--primary-color);
        border: 2px solid var(--primary-color);
        border-radius: 0.75rem;
        padding: 0.6rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        margin-left: 1rem;
    }

    .btn-auth-outline:hover {
        background-color: var(--primary-color);
        border: 2px solid var(--primary-color);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(127, 20, 63, 0.3);
    }

    .theme-switch-wrapper {
        display: flex;
        align-items: center;
        margin-left: 1.5rem;
    }

    .theme-switch {
        display: inline-block;
        height: 34px;
        position: relative;
        width: 60px;
    }

    .theme-switch input {
        display: none;
    }

    .slider {
        background-color: #ccc;
        bottom: 0;
        cursor: pointer;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        transition: 0.4s;
    }

    .slider:before {
        background-color: #fff;
        bottom: 4px;
        content: "";
        height: 26px;
        left: 4px;
        position: absolute;
        transition: 0.4s;
        width: 26px;
    }

    input:checked+.slider {
        background-color: var(--secondary-color);
    }

    input:checked+.slider:before {
        transform: translateX(26px);
    }

    .slider.round {
        border-radius: 34px;
    }

    .slider.round:before {
        border-radius: 50%;
    }

    @@media (max-width: 991.98px) {
        .navbar-nav {
            text-align: center;
            align-items: flex-start;
            color: var(--text-color);
        }

        .nav-link {
            margin: 0.5rem 0;
            padding-left: 1rem;
            color: var(--text-color);
        }

        .btn-auth,
        .btn-auth-outline {
            display: block;
            width: fit-content;
            margin: 0.5rem auto;
            color: var(--text-color);
        }
    }
</style>

<body>
    <header>
        <nav class="navbar navbar-expand-lg">
            <div class="container">
                <a href="/posts" class="navbar-brand">
                    <img style="height: 40px;" src="/img/mlsblog.png" alt="Mls Blog Logo">
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-between" id="navbarCollapse">
                    <ul class="navbar-nav mx-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a href="/posts" class="nav-link">Posts</a>
                        </li>
                        @if (User.Identity!.IsAuthenticated)
                        {
                            <li class="nav-item">
                                @if (User.IsInRole("Admin"))
                                {
                                    <a href="/posts/list" class="nav-link">Manage Posts</a>
                                }
                                else
                                {
                                    <a href="/posts/list" class="nav-link">My Posts</a>
                                }
                            </li>
                        }
                    </ul>

                    <ul class="navbar-nav mb-2 mb-lg-0 align-items-lg-center">
                        <li class="nav-item theme-switch-wrapper d-none d-lg-block">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox" />
                                <div class="slider round"></div>
                            </label>
                        </li>
                        @if (User.Identity!.IsAuthenticated)
                        {
                            @await Component.InvokeAsync("Notifications")

                            <li class="nav-item dropdown">
                                <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    @User.Identity.Name
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li>
                                        <a href="/profile/@User.Identity.Name" class="dropdown-item">
                                            <i class="bi bi-person-circle me-2"></i> My Profile
                                        </a>
                                    </li>
                                    <li>
                                        <a href="/users/editprofile" class="dropdown-item">
                                            <i class="bi bi-gear-fill me-2"></i> Edit Profile
                                        </a>
                                    </li>
                                    <li><a href="/Message/Index"
                                            class="dropdown-item d-flex justify-content-between align-items-center">
                                            <span><i class="bi bi-envelope-fill me-2"></i> Messages</span>
                                            @await Component.InvokeAsync("UnreadMessageCount")
                                        </a></li>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <li>
                                            <hr class="dropdown-divider">
                                        </li>
                                        <li><a class="dropdown-item" href="/Admin/UserList"><i
                                                    class="bi bi-people-fill me-2"></i> Admin Panel</a></li>
                                    }

                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <li>
                                        <a href="/users/logout" class="dropdown-item">
                                            <i class="bi bi-box-arrow-right me-2"></i> Log Out
                                        </a>
                                    </li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a href="/users/login" class="btn-auth-outline">Log In</a>
                            </li>
                            <li class="nav-item">
                                <a href="/users/register" class="btn-auth">Sign Up</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container mt-3">
        @RenderBody()
    </main>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const themeSwitch = document.getElementById('checkbox');
            const currentTheme = localStorage.getItem('theme');

            if (currentTheme) {
                document.body.classList.add(currentTheme);
                if (currentTheme === 'dark-theme') {
                    themeSwitch.checked = true;
                }
            } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.body.classList.add('dark-theme');
                themeSwitch.checked = true;
            }

            themeSwitch.addEventListener('change', function () {
                if (this.checked) {
                    document.body.classList.add('dark-theme');
                    localStorage.setItem('theme', 'dark-theme');
                } else {
                    document.body.classList.remove('dark-theme');
                    localStorage.setItem('theme', 'light-theme');
                }
            });

            const navbar = document.querySelector('.navbar');
            const scrollThreshold = 50;

            window.addEventListener('scroll', () => {
                if (window.scrollY > scrollThreshold) {
                    navbar.classList.add('navbar-scrolled');
                } else {
                    navbar.classList.remove('navbar-scrolled');
                }
            });

            if (window.scrollY > scrollThreshold) {
                navbar.classList.add('navbar-scrolled');
            }

            var notificationLink = document.getElementById('notificationDropdown');

            if (notificationLink) {
                notificationLink.addEventListener('show.bs.dropdown', function () {
                    var badge = document.getElementById('notification-badge');

                    if (badge && !badge.classList.contains('d-none')) {
                        fetch('/Notifications/MarkAllAsRead', {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                            }
                        }).then(response => {
                            if (response.ok) return response.json();
                            return Promise.reject(response);
                        })
                            .then(data => {
                                if (data.success) {
                                    badge.classList.add('d-none');
                                    var unreadItems = document.querySelectorAll('.dropdown-menu a[style*="background-color"]');
                                    unreadItems.forEach(item => {
                                        item.style.backgroundColor = 'transparent';
                                    });
                                }
                            }).catch(error => console.error('Error marking notifications as read:', error));
                    }
                });
            }

            toastr.options = {
                "positionClass": "toast-bottom-right"
            };
            @if (TempData["ToastMessage"] != null)
                {
                    var message = TempData["ToastMessage"]?.ToString();
                    var type = TempData["ToastType"]?.ToString() ?? "info";

                    if (type == "success")
                    {
                        <text>
                            toastr.success("@Html.Raw(message)");
                        </text>
                }
                                                                                                                                                        else if (type == "error")
                    {
                        <text>
                            toastr.error("@Html.Raw(message)");
                        </text>
                }
                                                                                                                                                        else if (type == "warning")
                    {
                        <text>
                            toastr.warning("@Html.Raw(message)");
                        </text>
                }
                    else
                    {
                        <text>
                            toastr.info("@Html.Raw(message)");
                        </text>
                }
                }
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>