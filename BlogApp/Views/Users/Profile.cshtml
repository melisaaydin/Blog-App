@model User
@using System.Globalization
@using System.Security.Claims

@{
    ViewData["Title"] = $"{Model.Name}'s Profile";
}

<style>
    body {
        background-color: var(--background-color);
    }

    .profile-card {
        background-color: var(--card-background);
        border-radius: 1rem;
        box-shadow: var(--card-shadow);
        padding: 2.5rem;
        margin-top: 60px;
        margin-bottom: 2rem;
        border-radius: 2rem;
        box-shadow: 0 2px 0 var(--primary-color);
    }

    .profile-header {
        display: flex;
        align-items: center;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 2rem;
        margin-bottom: 2rem;
    }

    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 5px solid var(--card-background);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        margin-right: 2rem;
    }

    .profile-info h2 {
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 0.25rem;
    }

    .profile-info p {
        color: var(--text-secondary-color);
        font-size: 1rem;
        font-weight: 500;
    }

    .profile-stats {
        display: flex;
        gap: 2rem;
        margin-top: 1rem;
    }

    .stat-item {
        text-align: center;
        font-size: 1rem;
        color: var(--text-color);
    }

    .stat-item .count {
        display: block;
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--primary-color);
    }

    .nav-tabs {
        border-bottom: 2px solid var(--border-color);
    }

    .nav-tabs .nav-link {
        border: none;
        border-bottom: 2px solid transparent;
        color: var(--text-secondary-color);
        font-weight: 600;
        padding: 0.75rem 1.25rem;
        transition: all 0.2s ease-in-out;
    }

    .nav-tabs .nav-link.active,
    .nav-tabs .nav-link:hover {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
        background-color: transparent;
    }

    .tab-content {
        padding-top: 2rem;
    }


    .activity-list .list-group-item {
        border-radius: 10px;
        margin-bottom: 1rem;
        border: 1px solid var(--border-color);
        padding: 1.25rem;
        transition: all 0.2s ease-in-out;
        background-color: var(--background-color);
    }

    .activity-list .list-group-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.07);
        border-left: 4px solid var(--primary-color);
        background-color: rgba(var(--primary-color-rgb), 0.05);
    }

    .post-link {
        font-weight: 600;
        color: var(--text-color);
        text-decoration: none;
        font-size: 1.1rem;
    }

    .post-link:hover {
        color: var(--primary-color);
    }

    .item-meta {
        font-size: 0.85rem;
        color: var(--text-secondary-color);
        margin-top: 0.5rem;
    }

    .comment-text {
        font-style: italic;
        color: var(--text-color);
        margin-bottom: 0.75rem;
    }

    .comment-post-link {
        font-weight: 500;
        color: var(--text-secondary-color);
    }
</style>

<div class="container">
    <div class="profile-card">
        @Html.AntiForgeryToken()
        <div class="profile-header">
            <img src="/img/@(Model.Image ?? "default-avatar.jpg")" class="profile-avatar" alt="@Model.Name">
            <div class="profile-info">
                <h2>@Model.Name</h2>
                <p>@@@Model.UserName</p>
                <div class="profile-stats">
                    <div class="stat-item">
                        <span class="count">@Model.Posts.Count(p => p.IsActive)</span> Posts
                    </div>
                    <div class="stat-item">
                        <span class="count">@Model.Followers.Count</span> Followers
                    </div>
                    <div class="stat-item">
                        <span class="count">@Model.Following.Count</span> Following
                    </div>
                </div>
            </div>

            <div class="ms-auto d-flex align-items-center">
                @if (User.Identity?.IsAuthenticated == true)
                {
                    if (User.FindFirstValue(ClaimTypes.NameIdentifier) == Model.Id)
                    {
                        <a href="/users/editprofile" class="btn btn-outline-secondary">
                            <i class="bi bi-pencil-square"></i> Edit Profile
                        </a>
                    }
                    else
                    {
                        var isFollowing = Model.Followers.Any(f => f.FollowerId ==
                        User.FindFirstValue(ClaimTypes.NameIdentifier));
                        if (isFollowing)
                        {
                            <button id="followBtn" class="btn btn-danger" data-action="unfollow" data-username="@Model.UserName">
                                <i class="bi bi-person-dash-fill"></i> Unfollow
                            </button>
                        }
                        else
                        {
                            <button id="followBtn" class="btn btn-primary" data-action="follow" data-username="@Model.UserName">
                                <i class="bi bi-person-plus-fill"></i> Follow
                            </button>
                        }
                    }
                }
            </div>
        </div>

        <ul class="nav nav-tabs" id="profileTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="posts-tab" data-bs-toggle="tab" data-bs-target="#posts"
                    type="button" role="tab" aria-controls="posts" aria-selected="true">
                    <i class="bi bi-file-earmark-post"></i> Published Posts
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="comments-tab" data-bs-toggle="tab" data-bs-target="#comments" type="button"
                    role="tab" aria-controls="comments" aria-selected="false">
                    <i class="bi bi-chat-dots"></i> Comments
                </button>
            </li>
        </ul>

        <div class="tab-content" id="profileTabsContent">
            <div class="tab-pane fade show active" id="posts" role="tabpanel" aria-labelledby="posts-tab">
                @if (Model.Posts.Any(p => p.IsActive))
                {
                    <ul class="list-group activity-list">
                        @foreach (var post in Model.Posts.Where(p => p.IsActive).OrderByDescending(p => p.PublishedOn))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-caret-right-fill me-2" style="color: var(--primary-color);"></i>
                                    <a class="post-link" href="/posts/details/@post.Url">@post.Title</a>
                                </div>
                                <span class="item-meta">@post.PublishedOn.ToString("dd MMMM yyyy", new
                                                                CultureInfo("en-US"))</span>
                    </li>
                                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">This user has not published any posts yet.</p>
                }
            </div>
            <div class="tab-pane fade" id="comments" role="tabpanel" aria-labelledby="comments-tab">
                @if (Model.Comments.Any(c => c.Post != null && c.Post.IsActive))
                {
                    <ul class="list-group activity-list">
                        @foreach (var comment in Model.Comments.Where(c => c.Post != null &&
                                            c.Post.IsActive).OrderByDescending(c => c.PublishedOn))
                        {
                            <li class="list-group-item">
                                <p class="comment-text">"@comment.Text"</p>
                                <div class="item-meta text-end">
                                    commented on <a class="comment-post-link"
                                        href="/posts/details/@comment.Post.Url"><strong>@comment.Post.Title</strong></a>
                                    on @comment.PublishedOn.ToString("dd MMMM yyyy", new CultureInfo("en-US"))
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">This user has not made any comments on active posts yet.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var triggerTabList = [].slice.call(document.querySelectorAll('#profileTabs button'))
        triggerTabList.forEach(function (triggerEl) {
            var tabTrigger = new bootstrap.Tab(triggerEl)
            triggerEl.addEventListener('click', function (event) {
                event.preventDefault()
                tabTrigger.show()
            })
        })
    </script>
    <script>
        $(document).ready(function () {
            $('#followBtn').on('click', function () {
                const button = $(this);
                const action = button.data('action');
                const username = button.data('username');
                const url = action === 'follow' ? '/Users/Follow' : '/Users/Unfollow';
                const token = $('input[name="__RequestVerificationToken"]').val();

                button.prop('disabled', true);

                $.ajax({
                    type: 'POST',
                    url: url,
                    data: {
                        username: username,
                        __RequestVerificationToken: token
                    },
                    success: function (response) {
                        if (response.success) {
                            $('.stat-item .count').eq(1).text(response.followerCount);

                            if (action === 'follow') {
                                button.data('action', 'unfollow')
                                    .text(' Unfollow')
                                    .removeClass('btn-primary')
                                    .addClass('btn-danger');
                                button.prepend('<i class="bi bi-person-dash-fill"></i>');

                                let badge = $('#notification-badge');
                                if (badge.length) {
                                    let currentCount = parseInt(badge.text()) || 0;
                                    badge.text(currentCount + 1).removeClass('d-none');
                                }
                            } else {
                                button.data('action', 'follow')
                                    .text(' Follow')
                                    .removeClass('btn-danger')
                                    .addClass('btn-primary');
                                button.prepend('<i class="bi bi-person-plus-fill"></i>');
                            }
                        } else {
                            alert(response.message || 'An error occurred.');
                        }
                    },
                    error: function () {
                        alert('An unexpected error occurred. Please try again.');
                    },
                    complete: function () {
                        button.prop('disabled', false);
                    }
                });
            });
        });
    </script>
}