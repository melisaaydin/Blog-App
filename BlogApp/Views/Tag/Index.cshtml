@model BlogApp.Models.TagsViewModel
@{
    ViewData["Title"] = "Tags | MyBlog";
    ViewBag.MetaDescription = "Explore tags and related articles at MyBlog.";
}

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
        padding-top: 80px;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Roboto', sans-serif;
        color: var(--text-color);
    }

    .header {
        margin-bottom: 1rem;
        margin-top: 40px;
        text-align: center;
    }

    .header h1 {
        font-size: 3rem;
        font-weight: 900;
        color: var(--primary-color);

        animation: fadeInUp 0.8s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .header .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 0.75rem;
        padding: 0.9rem 2rem;
        font-weight: 600;
        color: white;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .header .btn-primary:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
    }

    .filter-bar {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-bottom: 2.5rem;
        flex-wrap: wrap;
        align-items: center;
        background-color: transparent !important;
        padding: 1rem;
        border-radius: 0.75rem;

    }

    .filter-bar select {
        appearance: none;
        background-color: var(--card-background);
        color: var(--text-color);
        font-weight: 500;
        font-size: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 0.75rem;
        padding: 0.75rem 2.5rem 0.75rem 1.2rem;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23333' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 1rem;
        box-shadow: var(--card-shadow);
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }

    .filter-bar select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(var(--primary-color-rgb), 0.25);
        outline: none;
    }

    a {
        text-decoration: none;
        color: var(--secondary-color)
    }

    .tag-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        padding: 0 1rem;
        animation: fadeIn 0.6s ease-out;
        margin-bottom: 20px;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .tag-card {
        background: var(--card-background);
        border-radius: 1rem;
        box-shadow: var(--card-shadow);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid var(--border-color);
        animation: fadeInUp 0.6s ease-out backwards;
        animation-delay: calc(var(--order) * 0.1s);
    }

    .tag-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
    }

    .tag-card-content {
        padding: 1.8rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .tag-card-content h3 {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 0.6rem;
        color: var(--text-color);
        transition: color 0.3s ease;
    }

    .tag-card-content h3 a:hover {
        color: var(--secondary-color);
    }

    .tag-meta {
        font-size: 0.85rem;
        color: var(--text-secondary-color);
        font-weight: 500;

    }

    .pagination {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 2.5rem;
        flex-wrap: wrap;
    }

    .pagination a,
    .pagination span {
        padding: 0.6rem 1.2rem;
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        color: var(--text-color);
        text-decoration: none;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .pagination a:hover {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .pagination .active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .alert-info {
        background-color: var(--info-background, #eef2ff);
        border: 1px solid var(--info-border, #b9c2ff);
        color: var(--info-color, #4c51bf);
        padding: 1.5rem;
        border-radius: 0.75rem;
        text-align: center;
        margin-top: 2rem;
        font-size: 1.1rem;
        box-shadow: var(--card-shadow);
    }

    @@media (max-width: 768px) {
        .header h1 {
            font-size: 2.5rem;
        }

        .header .btn-primary {
            width: 100%;
            margin-top: 1rem;
        }

        .filter-bar {
            flex-direction: column;
            padding: 0.5rem;
        }

        .tag-grid {
            grid-template-columns: 1fr;
            padding: 0;
        }

        .tag-card-content h3 {
            font-size: 1.2rem;
        }

        .tag-meta {
            font-size: 0.8rem;
        }

        .pagination a,
        .pagination span {
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
        }
    }
</style>

<div class="container">
    <div class="header">
        <h1>Tags</h1>
        <div style="display: flex;align-items: center;justify-content:space-between">
            <a asp-action="Create" asp-controller="Tag" class="btn btn-primary">Create New Tag</a>
            <div class="filter-bar " style="margin-top: 37px;">
                <select id="sortFilter" onchange="applySort()">
                    @{
                        var sortOptions = new[]
                        {
                                        new { Value = "newest", Text = "Newest" },
                                        new { Value = "popular", Text = "Most Popular" },
                                        new { Value = "updated", Text = "Recently Updated" }
                                        };

                        foreach (var option in sortOptions)
                        {
                            if (Model.Sort == option.Value)
                            {
                                <option value="@option.Value" selected>@option.Text</option>
                            }
                            else
                            {
                                <option value="@option.Value">@option.Text</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>

    </div>



    @if (Model.Tags.Any())
    {
        <div class="tag-grid">
            @foreach (var tag in Model.Tags.Select((t, index) => new { Tag = t, Index = index }))
            {
                <div class="tag-card" style="--order: @tag.Index">
                    <div class="tag-card-content">
                        <h3><a asp-action="Details" asp-controller="Tag" asp-route-url="@tag.Tag.Url">@tag.Tag.Text</a></h3>
                        <div class="tag-meta">
                            <span>@tag.Tag.Posts.Count Posts</span>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (Model.TotalPages > 1)
        {
            <div class="pagination mt-4">
                @if (Model.CurrentPage > 1)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@(Model.CurrentPage - 1)">« Previous</a>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@i"
                        class="@(i == Model.CurrentPage ? "active" : "")">@i</a>
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <a asp-action="Index" asp-route-sort="@Model.Sort" asp-route-page="@(Model.CurrentPage + 1)">Next »</a>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-info">
            No tags found.
        </div>
    }
</div>

@section Scripts {
    <script>
        function applySort() {
            const sort = document.getElementById('sortFilter').value;
            window.location.href = `/tags?sort=${sort}&page=1`;
        }
    </script>
}