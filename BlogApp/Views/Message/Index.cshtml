@model InboxViewModel
@{
    ViewData["Title"] = "Messages";
    var currentUserName = User.Identity?.Name ?? "";
}

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: var(--background-color);
        color: var(--text-color);
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Roboto', sans-serif;
        color: var(--text-color);
    }

    .chat-container {
        display: flex;
        height: calc(80vh);
        max-height: 700px;
        margin-top: 40px;
        border-radius: .5rem;
        overflow: hidden;
        margin-bottom: 40px;
        background: transparent;
    }

    .chat-sidebar {
        display: flex;
        flex-direction: column;
        width: 380px;
        min-width: 300px;
        border: 1px solid var(--border-color);
        background-color: var(--card-background);
        border-radius: .5rem;
        box-shadow: var(--card-shadow);
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
        border: 1px solid var(--border-color);
        margin-left: 1rem;
        background-color: var(--background-color);
        border-radius: .5rem;
        box-shadow: var(--card-shadow);
        transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .list-group-item.active {
        background-color: var(--light-primary-background) !important;
        border-left: 4px solid var(--primary-color) !important;
        font-weight: 600;
        border-color: var(--border-color);
        color: var(--primary-color);
    }

    .list-group-item {
        background-color: var(--card-background);
        color: var(--text-color);
        border-color: var(--border-color);
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .list-group-item:hover {
        background-color: var(--hover-background);
    }

    .nav-pills .nav-link {
        color: var(--text-secondary-color);
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .nav-pills .nav-link.active {
        background-color: var(--primary-color) !important;
        color: white !important;
    }

    :root {
        --light-primary-background: #f8f0f4;
    }

    .dark-theme {
        --light-primary-background: #b591b588;
    }
</style>

<div class="chat-container">
    <div class="chat-sidebar">
        <div class="p-3 border-bottom" style="border-color: var(--border-color) !important;">
            <ul class="nav nav-pills nav-fill" id="messageTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="chats-tab" data-bs-toggle="tab" data-bs-target="#chats-pane"
                        type="button" role="tab">Chats</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="contacts-tab" data-bs-toggle="tab" data-bs-target="#contacts-pane"
                        type="button" role="tab">New Chat</button>
                </li>
            </ul>
        </div>
        <div class="flex-grow-1" style="overflow-y: auto;">
            <div class="tab-content h-100">
                <div class="tab-pane fade show active h-100" id="chats-pane" role="tabpanel">
                    <div class="list-group list-group-flush">
                        @if (Model.Conversations != null && Model.Conversations.Any())
                        {
                            @foreach (var convo in Model.Conversations)
                            {
                                if (convo.OtherUser != null && !string.IsNullOrEmpty(convo.OtherUser.UserName) &&
                                convo.OtherUser.UserName != currentUserName)
                                {
                                    <a href="#" class="list-group-item list-group-item-action p-3 conversation-link"
                                        data-username="@convo.OtherUser.UserName">
                                        <div class="d-flex align-items-center">
                                            <img src="/img/@(convo.OtherUser.Image ?? "default-avatar.jpg")" alt="avatar"
                                                class="rounded-circle me-3" style="width: 50px; height: 50px;">
                                            <div class="w-100">
                                                <div class="d-flex justify-content-between">
                                                    <h6 class="mb-1" style="color: var(--text-color);">@convo.OtherUser.Name</h6>
                                                    <small class="text-muted"
                                                        style="color: var(--text-secondary-color) !important;">
                                                        @(convo.LastMessage?.SentAt.ToString("HH:mm") ?? "")
                                                    </small>
                                                </div>
                                                <p class="mb-1 small text-muted text-truncate"
                                                    style="color: var(--text-secondary-color) !important;">
                                                    @(convo.LastMessage?.Content ?? "No messages yet")
                                                </p>
                                            </div>
                                        </div>
                                    </a>
                                }
                            }
                        }
                        else
                        {
                            <p class="text-center text-muted p-4" style="color: var(--text-secondary-color) !important;">
                                No conversations available. Start a new chat from the "New Chat" tab.
                            </p>
                        }
                    </div>
                </div>
                <div class="tab-pane fade h-100" id="contacts-pane" role="tabpanel">
                    <div class="list-group list-group-flush">
                        @if (Model.Contacts != null && Model.Contacts.Any())
                        {
                            @foreach (var contact in Model.Contacts.Where(c => !string.IsNullOrEmpty(c.UserName) &&
                                                    c.UserName != currentUserName))
                            {
                                <a href="#"
                                    class="list-group-item list-group-item-action d-flex align-items-center p-3 conversation-link"
                                    data-username="@contact.UserName">
                                    <img src="/img/@(contact.Image ?? "default-avatar.jpg")" alt="avatar"
                                        class="rounded-circle me-3" style="width: 40px; height: 40px;">
                                    <span style="color: var(--text-color);">@contact.Name</span>
                                </a>
                            }
                        }
                        else
                        {
                            <p class="text-center text-muted p-4" style="color: var(--text-secondary-color) !important;">
                                You have no mutual followers to start a new chat.
                            </p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="chat-content-area" class="chat-main">
        <!-- Mesaj yoksa boÅŸ -->
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $(document).on('click', '.conversation-link', function (e) {
                e.preventDefault();
                var username = $(this).data('username');
                if (!username || username === '') {
                    console.error("Username is undefined, null, or empty.");
                    $('#chat-content-area').html('<p class="text-danger text-center p-4" style="color: var(--error-color);">Invalid username. Please try again.</p>');
                    return;
                }
                var url = `/Message/Chat/${encodeURIComponent(username)}`;
                console.log("Loading chat for URL: " + url);
                console.log("Clicked username: " + username);
                $('.conversation-link').removeClass('active');
                $(this).addClass('active');

                $('#chat-content-area').html('<div class="d-flex justify-content-center align-items-center h-100"><div class="spinner-border" style="color: var(--primary-color);" role="status"><span class="visually-hidden">Loading...</span></div></div>');

                $.ajax({
                    type: "GET",
                    url: url,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    beforeSend: function (xhr) {
                        console.log("Sending GET request to: " + url);
                    },
                    success: function (data) {
                        console.log("Chat loaded successfully for username: " + username);
                        $('#chat-content-area').html(data);
                        var chatBox = document.getElementById("chat-box");
                        if (chatBox) {
                            chatBox.scrollTop = chatBox.scrollHeight;
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Failed to load chat: " + xhr.status + " " + xhr.statusText);
                        console.error("Response: ", xhr.responseText);
                        $('#chat-content-area').html('<p class="text-danger text-center p-4" style="color: var(--error-color);">Failed to load chat: ' + (xhr.responseJSON?.message || error) + '</p>');
                    }
                });
            });

            var firstConversationLink = $('.conversation-link').first();
            if (firstConversationLink.length > 0) {
                console.log("Triggering first conversation link with username: " + firstConversationLink.data('username'));
                firstConversationLink.trigger('click');
            } else {
                console.log("No conversation links found.");
            }
        });
    </script>
}